<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FangZhongYu-BouTyuuGyoku</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/FangZhongYu521/"/>
  <updated>2018-10-29T09:26:11.066Z</updated>
  <id>https://github.com/FangZhongYu521/</id>
  
  <author>
    <name>房忠玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webSocket</title>
    <link href="https://github.com/FangZhongYu521/2018/10/17/webSocket/"/>
    <id>https://github.com/FangZhongYu521/2018/10/17/webSocket/</id>
    <published>2018-10-17T05:26:09.000Z</published>
    <updated>2018-10-29T09:26:11.066Z</updated>
    
    <content type="html"><![CDATA[<p>Spring4.0以后引入了对websocket的支持 。相信你已经搭建了SpringMVC的开发框架。<br>首先jar依赖</p><pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework&lt;/groupId&gt;     &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt;     &lt;version&gt;4.0.1.RELEASE&lt;/version&gt;   &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework&lt;/groupId&gt;     &lt;artifactId&gt;spring-messaging&lt;/artifactId&gt;     &lt;version&gt;4.0.1.RELEASE&lt;/version&gt;   &lt;/dependency&gt;</code></pre><p>spring-mvc.xml需要配置，前后台分离开发事需要范文后台接口的路由：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;xmlns:websocket=&quot;http://www.springframework.org/schema/websocket&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-4.3.xsd     http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context-4.3.xsd     http://www.springframework.org/schema/websocket     http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd &quot;&gt;&lt;!--     &lt;bean id=&quot;websocket&quot; class=&quot;com.chat.system.websocket.handler.WebsocketEndPoint&quot; /&gt;&lt;websocket:handlers&gt;    &lt;websocket:mapping path=&quot;/websocket&quot; handler=&quot;websocket&quot; /&gt;    &lt;websocket:handshake-interceptors&gt;        &lt;bean class=&quot;com.chat.system.websocket.HandshakeInterceptor&quot; /&gt;    &lt;/websocket:handshake-interceptors&gt;&lt;/websocket:handlers&gt; --&gt;&lt;bean id=&quot;websocket&quot; class=&quot;co.jp.chatsys.modules.sys.websocket.demo.WebSocketHander&quot; /&gt;&lt;websocket:handlers allowed-origins=&quot;*&quot; &gt;    &lt;websocket:mapping path=&quot;/echo&quot; handler=&quot;websocket&quot; /&gt;    &lt;websocket:handshake-interceptors&gt;        &lt;bean class=&quot;co.jp.chatsys.modules.sys.websocket.demo.HandshakeInterceptor&quot; /&gt;    &lt;/websocket:handshake-interceptors&gt;&lt;/beans&gt;</code></pre><p>HandshakeInterceptor.java</p><pre><code>import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.http.server.ServerHttpRequest;import org.springframework.http.server.ServerHttpResponse;import org.springframework.http.server.ServletServerHttpRequest;import org.springframework.web.socket.WebSocketHandler;import org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;public class HandshakeInterceptor extends HttpSessionHandshakeInterceptor {// 握手前@Overridepublic boolean beforeHandshake(ServerHttpRequest request,        ServerHttpResponse response, WebSocketHandler wsHandler,        Map&lt;String, Object&gt; attributes) throws Exception {    System.out.println(&quot;++++++++++++++++ HandshakeInterceptor: beforeHandshake  ++++++++++++++&quot;+attributes);    if (request instanceof ServletServerHttpRequest) {        HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest();        String userId = ((ServletServerHttpRequest) request).getServletRequest().getParameter(&quot;userId&quot;);        String toUserId = ((ServletServerHttpRequest) request).getServletRequest().getParameter(&quot;toUserId&quot;);        attributes.put(&quot;WEBSOCKET_USERNAME&quot;, userId);        attributes.put(&quot;TO_WEBSOCKET_USERNAME&quot;, toUserId);        servletRequest.getSession().setAttribute(&quot;WEBSOCKET_USERNAME&quot;, userId);        servletRequest.getSession().setAttribute(&quot;TO_WEBSOCKET_USERNAME&quot;, toUserId);    }    return super.beforeHandshake(request, response, wsHandler, attributes);}// 握手后@Overridepublic void afterHandshake(ServerHttpRequest request,        ServerHttpResponse response, WebSocketHandler wsHandler,        Exception ex) {    System.out.println(&quot;++++++++++++++++ HandshakeInterceptor: afterHandshake  ++++++++++++++&quot;);    super.afterHandshake(request, response, wsHandler, ex);}}</code></pre><p>WebSocketConfig.java</p><pre><code>import org.springframework.web.socket.config.annotation.WebSocketConfigurer;import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;//@Configuration//@EnableWebSocket // 开启websocketpublic class WebSocketConfig implements WebSocketConfigurer {@Overridepublic void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {    registry.addHandler(new WebSocketHander(), &quot;/echo&quot;).addInterceptors(new HandshakeInterceptor()); // 支持websocket的访问链接    registry.addHandler(new WebSocketHander(), &quot;/sockjs/echo&quot;).addInterceptors(new HandshakeInterceptor()).withSockJS(); // 不支持websocket的访问链接}}</code></pre><p>WebSocketHander.java</p><pre><code>import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.web.socket.CloseStatus;import org.springframework.web.socket.TextMessage;import org.springframework.web.socket.WebSocketHandler;import org.springframework.web.socket.WebSocketMessage;import org.springframework.web.socket.WebSocketSession;import co.jp.chatsys.modules.boss.entity.ChatInfo;import co.jp.chatsys.modules.boss.entity.MasterDictData;import co.jp.chatsys.modules.boss.entity.SettingGreetings;import co.jp.chatsys.modules.sys.utils.ChatServerUtil;public class WebSocketHander implements WebSocketHandler {private static final Logger logger = Logger.getLogger(WebSocketHander.class);private static final Map&lt;String,WebSocketSession&gt; sessions = new HashMap&lt;String, WebSocketSession&gt;();private static final ArrayList&lt;WebSocketSession&gt; users = new ArrayList&lt;WebSocketSession&gt;();// 初次链接成功执行@Overridepublic void afterConnectionEstablished(WebSocketSession session) throws Exception {    logger.debug(&quot;链接成功......&quot;);    users.add(session);    String userId = (String) session.getAttributes().get(&quot;WEBSOCKET_USERNAME&quot;);    String toUserId = (String) session.getAttributes().get(&quot;TO_WEBSOCKET_USERNAME&quot;);    if (userId != null &amp;&amp; toUserId != null) {        // 根据自己的业务需求写初次握手后的逻辑        // 例如取出聊天记录        sendMessageToUser(userId, toUserId, masterDictData.getLabel(), userType, roomNum, ymdhms);    }}// 接受前台传送消息处理消息@Overridepublic void handleMessage(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)        throws Exception {    Date day=new Date();    SimpleDateFormat df = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);    String ymdhms = df.format(day);    String userId = (String) webSocketSession.getAttributes().get(&quot;WEBSOCKET_USERNAME&quot;);    String toUserId = (String) webSocketSession.getAttributes().get(&quot;TO_WEBSOCKET_USERNAME&quot;);    sendMessageToUser(userId, toUserId, webSocketMessage.getPayload(), type, roomNum, ymdhms);    // 根据业务需求，    // 例如发送完成后可以调用Isert数据库}@Overridepublic void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception {    if (webSocketSession.isOpen()) {        webSocketSession.close();    }    logger.debug(&quot;链接出错，关闭链接......&quot;);    users.remove(webSocketSession);}@Overridepublic void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception {    logger.debug(&quot;链接关闭......&quot; + closeStatus.toString());    users.remove(webSocketSession);}@Overridepublic boolean supportsPartialMessages() {    return false;}/** * 给所有在线用户发送消息 * * @param message */public void sendMessageToUsers(TextMessage message) {    for (WebSocketSession user : users) {        try {            if (user.isOpen()) {                user.sendMessage(message);            }        } catch (IOException e) {            e.printStackTrace();        }    }}/** * 给某个用户发送消息 * * @param userName * @param message */public void sendMessageToUser(String userId, String toUserId, Object message, String type, String roomNum,String ymdhms) {    for (WebSocketSession user : users) {        if (user.getAttributes().get(&quot;WEBSOCKET_USERNAME&quot;).equals(userId) &amp;&amp; user.getAttributes().get(&quot;TO_WEBSOCKET_USERNAME&quot;).equals(toUserId) &amp;&amp; user.getAttributes().get(&quot;ROOM_NUM&quot;).equals(roomNum)) {            try {                if (user.isOpen()) {                    Map&lt;String,Object&gt; dataMap = new HashMap&lt;String, Object&gt;();                    dataMap.put(&quot;mesKbn&quot;, type);                    dataMap.put(&quot;message&quot;, (String) message);                    dataMap.put(&quot;date&quot;, ymdhms.substring(0, 4) + &quot;-&quot; + ymdhms.substring(4, 6) + &quot;-&quot; + ymdhms.substring(6, 8) + &quot; &quot;+ ymdhms.substring(8, 10)+&quot;:&quot;+ymdhms.substring(10, 12));                    String dataStr = JSONObject.fromObject(dataMap).toString();                    TextMessage  returnMessage = new TextMessage(dataStr);                    user.sendMessage(returnMessage);                }            } catch (IOException e) {                e.printStackTrace();            }        } else if (user.getAttributes().get(&quot;TO_WEBSOCKET_USERNAME&quot;).equals(userId) &amp;&amp; user.getAttributes().get(&quot;WEBSOCKET_USERNAME&quot;).equals(toUserId) &amp;&amp; user.getAttributes().get(&quot;ROOM_NUM&quot;).equals(roomNum)) {            try {                if (user.isOpen()) {                    Map&lt;String,Object&gt; dataMap = new HashMap&lt;String, Object&gt;();                    dataMap.put(&quot;mesKbn&quot;, type);                    dataMap.put(&quot;message&quot;, (String) message);                    dataMap.put(&quot;date&quot;, ymdhms.substring(0, 4) + &quot;-&quot; + ymdhms.substring(4, 6) + &quot;-&quot; + ymdhms.substring(6, 8) + &quot; &quot;+ ymdhms.substring(8, 10)+&quot;:&quot;+ymdhms.substring(10, 12));                    String dataStr = JSONObject.fromObject(dataMap).toString();                    TextMessage  returnMessage = new TextMessage(dataStr);                    user.sendMessage(returnMessage);                }            } catch (IOException e) {                e.printStackTrace();            }        }    }}}</code></pre><p>后台代码也就以上这些<br>到前台VUE更简单<br>前台也需要一个socket来得到后台的通知，HTML5就自带了一个</p><pre><code>&lt;template&gt;  &lt;div class=&quot;background&quot;&gt;    &lt;div id=&quot;main&quot; class=&quot;inner&quot;&gt;      &lt;div class=&quot;chat-wrap&quot;&gt;        &lt;!--聊天对话显示--&gt;        &lt;div class=&quot;chat-box show-box&quot;&gt;          &lt;div class=&quot;chat-list&quot; id=&quot;chatWindow&quot; style=&quot;visibility: visible;&quot;&gt;            &lt;ul&gt;              &lt;li v-for=&quot;item in datamsg&quot;&gt;                &lt;div :class=&quot;[&apos;status-read&apos;,item.mesKbn==&apos;1&apos;?&apos;item-myself&apos;:&apos;item-friend&apos;]&quot;&gt;                  &lt;div class=&quot;figure&quot;&gt;                    &lt;img v-show=&quot;item.mesKbn==&apos;0&apos;&quot;                         :src=&quot;toUser.toUserPhoto&quot;                         alt=&quot;&quot;&gt;                  &lt;/div&gt;                  &lt;div class=&quot;myFigure&quot;&gt;                    &lt;img v-show=&quot;item.mesKbn==&apos;1&apos;&quot;                         :src=&quot;user.userPhoto&quot;                         alt=&quot;&quot;&gt;                  &lt;/div&gt;                  &lt;div class=&quot;text&quot;&gt;                    &lt;div v-if=&quot;item.mesKbn==&apos;0&apos;&quot; class=&quot;status1&quot; :style=&quot;{ backgroundPosition: -80+&apos;px &apos;+0} &quot;&gt;{{item.date}}&lt;/div&gt;                    &lt;div v-else=&quot;item.mesKbn==&apos;1&apos;&quot; class=&quot;status&quot; :style=&quot;{ backgroundPosition: -80+&apos;px &apos;+0} &quot;&gt;{{item.date}}&lt;/div&gt;                    &lt;div v-emotion=&quot;item.message&quot;&gt;&lt;/div&gt;                  &lt;/div&gt;                &lt;/div&gt;              &lt;/li&gt;            &lt;/ul&gt;          &lt;/div&gt;          &lt;!--用户输入部分--&gt;          &lt;div class=&quot;chat-editor&quot;&gt;            &lt;el-input type=&quot;textarea&quot; :rows=&quot;6&quot; placeholder=&quot;请输入内容&quot; v-model=&quot;message&quot;                      @keyup.ctrl.enter.native=&quot;sendMsg(message)&quot;&gt;            &lt;/el-input&gt;            &lt;div class=&quot;chat-op&quot;&gt;&lt;span class=&quot;tip&quot;&gt;按Ctrl+Enter键发送，按Enter键换行&lt;/span&gt;              &lt;button :class=&quot;[&apos;btn&apos;, &apos;btn-send&apos;,message==&apos;&apos;?&apos;btn-disabled&apos;:&apos;&apos; ]&quot; :disabled=&quot;message==&apos;&apos;&quot;                      @click=&quot;sendMsg(message)&quot;&gt;发送              &lt;/button&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  import {CHAT_HOST} from &apos;../../../build/config_host&apos;;  export default {    data() {      return {        websock: null,        datamsg: [],        userId:&apos;&apos;,        toUserId:&apos;&apos;,        hostUrl:&apos;&apos;      }    },    methods: {      initWebSocket(){ //初始化weosocket        //ws地址        const wsuri = this.hostUrl+&apos;/echo?userId=&apos;+ this.userId + &apos;&amp;toUserId=&apos; + this.toUserId        this.websock = new WebSocket(wsuri);        this.websock.onmessage = this.websocketonmessage;        this.websock.onclose = this.websocketclose;      },      websocketonmessage(e){ //数据接收        this.datamsg.push(JSON.parse(e.data));      },      sendMsg(agentData){//数据发送        if (/^\s*$/.test(this.message)) {          alert(&quot;请不要发送空消息&quot;)        } else if (this.message.length &gt; 200) {          alert(&quot;请不要超过200个字&quot;)        } else {          this.websock.send(agentData);          this.message = &quot;&quot;;        }      },      websocketclose(e){  //关闭        console.log(&quot;connection closed (&quot; + e.code + &quot;)&quot;);      },    },    created() {      this.hostUrl = CHAT_HOST      this.userId = window.localStorage.getItem(&quot;userId&quot;);      this.toUserId = window.localStorage.getItem(&quot;toUserId&quot;);    },  }&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</code></pre><p>config_host.js</p><pre><code>export const CHAT_HOST = &quot;ws://localhost:8080/bossjobchat&quot;</code></pre><p>画面：</p><p><img src="./liaotian1.png" style="width: 70%; heigth: 70%"><br><img src="./liaotian2.png" style="width: 70%; heigth: 70%"><br><img src="./liaotian3.png" style="width: 70%; heigth: 70%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring4.0以后引入了对websocket的支持 。相信你已经搭建了SpringMVC的开发框架。&lt;br&gt;首先jar依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;  
   &amp;lt;groupId&amp;gt;org.springframework
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="https://github.com/FangZhongYu521/2018/10/15/test-my-site/"/>
    <id>https://github.com/FangZhongYu521/2018/10/15/test-my-site/</id>
    <published>2018-10-15T11:43:12.000Z</published>
    <updated>2018-10-15T11:43:12.339Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/FangZhongYu521/2018/10/15/hello-world/"/>
    <id>https://github.com/FangZhongYu521/2018/10/15/hello-world/</id>
    <published>2018-10-15T11:42:01.817Z</published>
    <updated>2018-10-15T11:42:01.818Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
